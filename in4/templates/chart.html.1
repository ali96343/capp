 <html>
     <head>
         <title>Real time streaming</title>
         <script src="https://d3js.org/d3-array.v2.min.js"></script>
         <script src="https://d3js.org/d3-color.v1.min.js"></script>
         <script src="https://d3js.org/d3-format.v1.min.js"></script>
         <script src="https://d3js.org/d3-interpolate.v1.min.js"></script>
         <script src="https://d3js.org/d3-time.v1.min.js"></script>
         <script src="https://d3js.org/d3-time-format.v2.min.js"></script>
         <script src="https://d3js.org/d3-scale.v3.min.js"></script>
         <script src="https://d3js.org/d3-selection.v1.min.js"></script>
         <script src="https://d3js.org/d3-axis.v1.min.js"></script>
         <script src="https://huww98.github.io/TimeChart/dist/timechart.min.js"></script>
         <style>
             #chart { width: 100%; height: 300px; margin-top: 300px; }
         </style>
     </head>
     <body>
         <p>https://stribny.name/blog/2020/07/real-time-data-streaming-using-fastapi-and-websockets/</p>
         chart!
         <div id="chart"></div>


         <!-- script>
             const el = document.getElementById('chart');
             const dataPoints = [];
             const chart = new TimeChart(el, {
                 series: [{ data: dataPoints, name: 'Real-time measurement streaming', color: 'darkblue' }],
                 realTime: true,
                 xRange: { min: 0, max: 500 },
             });


             const ws = new WebSocket("ws://localhost:8000/ws");     
             let x = 0;
             ws.onmessage = function(event) {
                 const measurement = JSON.parse(event.data);
                 x += 1
                 dataPoints.push({x, y: measurement.value});
                 chart.update();
             };
         </script -->

<script>

    ! function(sio_url) {

            const el = document.getElementById('chart');
            const dataPoints = [];
            const chart = new TimeChart(el, {
                series: [{ data: dataPoints, name: 'Real-time measurement streaming', color: 'darkblue' }],
                realTime: true,
                xRange: { min: 0, max: 200 },
            });



            const socket = io.connect( sio_url );

            socket.on('connect', ()=> {
                socket.emit('sync_hello_connect', {data: 'hello from chart!'});
                console.log('chart connected')
            });

            socket.on('disconnect', ()=> {
                console.log('chart disconnected')
            });

            socket.on('reconnect', ()=>{
                console.log('chart reconnected')
            });


            socket.on('update_chart', (msg)=> {
                console.log('!!!!!!!!!!!!! ' + msg);
                const measurement = JSON.parse( msg );
                

             let x = 0;
                 x += 1
                 dataPoints.push({x, y: measurement.value});
                 chart.update();
            });

    }( "[[ = sio_serv_url ]]"   )

</script>



-----------------------------------------------------



     </body>
 </html>

